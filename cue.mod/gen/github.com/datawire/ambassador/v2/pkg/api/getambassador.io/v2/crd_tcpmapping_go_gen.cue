// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/datawire/ambassador/v2/pkg/api/getambassador.io/v2

package v2

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// TCPMappingSpec defines the desired state of TCPMapping
#TCPMappingSpec: {
	ambassador_id?: #AmbassadorID @go(AmbassadorID)

	// Port isn't a pointer because it's required.
	// +kubebuilder:validation:Required
	port?:    int    @go(Port)
	host?:    string @go(Host)
	address?: string @go(Address)

	// +kubebuilder:validation:Required
	service?:     string      @go(Service)
	enable_ipv4?: null | bool @go(EnableIPv4,*bool)
	enable_ipv6?: null | bool @go(EnableIPv6,*bool)
	circuit_breakers?: [...#CircuitBreaker] @go(CircuitBreakers,[]CircuitBreaker)

	// FIXME(lukeshu): Surely this should be an 'int'?
	idle_timeout_ms?: string               @go(IdleTimeoutMs)
	resolver?:        string               @go(Resolver)
	tls?:             null | #BoolOrString @go(TLS,*BoolOrString)
	weight?:          null | int           @go(Weight,*int)
	cluster_tag?:     string               @go(ClusterTag)

	// +k8s:conversion-gen:rename=StatsName
	v3StatsName?: string @go(V3StatsName)
}

// TCPMapping is the Schema for the tcpmappings API
//
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
#TCPMapping: {
	TypeMeta:  metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #TCPMappingSpec    @go(Spec)
}

// TCPMappingList contains a list of TCPMappings.
//
// +kubebuilder:object:root=true
#TCPMappingList: {
	TypeMeta:  metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TCPMapping] @go(Items,[]TCPMapping)
}
