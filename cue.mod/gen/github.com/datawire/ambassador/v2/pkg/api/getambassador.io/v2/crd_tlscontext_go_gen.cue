// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/datawire/ambassador/v2/pkg/api/getambassador.io/v2

package v2

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// TLSContextSpec defines the desired state of TLSContext
#TLSContextSpec: {
	ambassador_id?: #AmbassadorID @go(AmbassadorID)
	hosts?: [...string] @go(Hosts,[]string)
	secret?:            string      @go(Secret)
	cert_chain_file?:   string      @go(CertChainFile)
	private_key_file?:  string      @go(PrivateKeyFile)
	ca_secret?:         string      @go(CASecret)
	cacert_chain_file?: string      @go(CACertChainFile)
	alpn_protocols?:    string      @go(ALPNProtocols)
	cert_required?:     null | bool @go(CertRequired,*bool)

	// +kubebuilder:validation:Enum={"v1.0", "v1.1", "v1.2", "v1.3"}
	min_tls_version?: string @go(MinTLSVersion)

	// +kubebuilder:validation:Enum={"v1.0", "v1.1", "v1.2", "v1.3"}
	max_tls_version?: string @go(MaxTLSVersion)
	cipher_suites?: [...string] @go(CipherSuites,[]string)
	ecdh_curves?: [...string] @go(ECDHCurves,[]string)
	secret_namespacing?:      null | bool @go(SecretNamespacing,*bool)
	redirect_cleartext_from?: null | int  @go(RedirectCleartextFrom,*int)
	sni?:                     string      @go(SNI)
}

// TLSContext is the Schema for the tlscontexts API
//
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
#TLSContext: {
	TypeMeta:  metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #TLSContextSpec    @go(Spec)
}

// TLSContextList contains a list of TLSContexts.
//
// +kubebuilder:object:root=true
#TLSContextList: {
	TypeMeta:  metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#TLSContext] @go(Items,[]TLSContext)
}
