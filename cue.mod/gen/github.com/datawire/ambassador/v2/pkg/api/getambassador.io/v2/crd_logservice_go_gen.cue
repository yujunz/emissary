// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/datawire/ambassador/v2/pkg/api/getambassador.io/v2

package v2

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#AdditionalLogHeaders: {
	header_name?:     string      @go(HeaderName)
	during_request?:  null | bool @go(DuringRequest,*bool)
	during_response?: null | bool @go(DuringResponse,*bool)
	during_trailer?:  null | bool @go(DuringTrailer,*bool)
}

#DriverConfig: {
	additional_log_headers?: [...null | #AdditionalLogHeaders] @go(AdditionalLogHeaders,[]*AdditionalLogHeaders)
}

// LogServiceSpec defines the desired state of LogService
#LogServiceSpec: {
	ambassador_id?: #AmbassadorID @go(AmbassadorID)
	service?:       string        @go(Service)

	// +kubebuilder:validation:Enum={"tcp","http"}
	driver?:                   string               @go(Driver)
	driver_config?:            null | #DriverConfig @go(DriverConfig,*DriverConfig)
	flush_interval_time?:      null | int           @go(FlushIntervalTime,*int)
	flush_interval_byte_size?: null | int           @go(FlushIntervalByteSize,*int)
	grpc?:                     null | bool          @go(GRPC,*bool)

	// +k8s:conversion-gen:rename=StatsName
	v3StatsName?: string @go(V3StatsName)
}

// LogService is the Schema for the logservices API
//
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
#LogService: {
	TypeMeta:  metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #LogServiceSpec    @go(Spec)
}

// LogServiceList contains a list of LogServices.
//
// +kubebuilder:object:root=true
#LogServiceList: {
	TypeMeta:  metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#LogService] @go(Items,[]LogService)
}
